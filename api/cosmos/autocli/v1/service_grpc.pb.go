// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: cosmos/autocli/v1/service.proto

package autocliv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteInfoServiceClient is the client API for RemoteInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteInfoServiceClient interface {
	// AppOptions returns the autocli options for all of the modules in an app.
	AppOptions(ctx context.Context, in *AppOptionsRequest, opts ...grpc.CallOption) (*AppOptionsResponse, error)
}

type remoteInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteInfoServiceClient(cc grpc.ClientConnInterface) RemoteInfoServiceClient {
	return &remoteInfoServiceClient{cc}
}

func (c *remoteInfoServiceClient) AppOptions(ctx context.Context, in *AppOptionsRequest, opts ...grpc.CallOption) (*AppOptionsResponse, error) {
	out := new(AppOptionsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.autocli.v1.RemoteInfoService/AppOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteInfoServiceServer is the server API for RemoteInfoService service.
// All implementations must embed UnimplementedRemoteInfoServiceServer
// for forward compatibility
type RemoteInfoServiceServer interface {
	// AppOptions returns the autocli options for all of the modules in an app.
	AppOptions(context.Context, *AppOptionsRequest) (*AppOptionsResponse, error)
	mustEmbedUnimplementedRemoteInfoServiceServer()
}

// UnimplementedRemoteInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteInfoServiceServer struct {
}

func (UnimplementedRemoteInfoServiceServer) AppOptions(context.Context, *AppOptionsRequest) (*AppOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppOptions not implemented")
}
func (UnimplementedRemoteInfoServiceServer) mustEmbedUnimplementedRemoteInfoServiceServer() {}

// UnsafeRemoteInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteInfoServiceServer will
// result in compilation errors.
type UnsafeRemoteInfoServiceServer interface {
	mustEmbedUnimplementedRemoteInfoServiceServer()
}

func RegisterRemoteInfoServiceServer(s grpc.ServiceRegistrar, srv RemoteInfoServiceServer) {
	s.RegisterService(&RemoteInfoService_ServiceDesc, srv)
}

func _RemoteInfoService_AppOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteInfoServiceServer).AppOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.autocli.v1.RemoteInfoService/AppOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteInfoServiceServer).AppOptions(ctx, req.(*AppOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteInfoService_ServiceDesc is the grpc.ServiceDesc for RemoteInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.autocli.v1.RemoteInfoService",
	HandlerType: (*RemoteInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppOptions",
			Handler:    _RemoteInfoService_AppOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/autocli/v1/service.proto",
}
